// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `AdminProtocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Packet {
    // message fields
    pub field_type: PacketType,
    pub body: ::std::vec::Vec<u8>,
    // message oneof groups
    pub magic_number_present: ::std::option::Option<Packet_oneof_magic_number_present>,
    pub version_present: ::std::option::Option<Packet_oneof_version_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Packet {
    fn default() -> &'a Packet {
        <Packet as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Packet_oneof_magic_number_present {
    magic_number(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Packet_oneof_version_present {
    version(i32),
}

impl Packet {
    pub fn new() -> Packet {
        ::std::default::Default::default()
    }

    // int32 magic_number = 1;


    pub fn get_magic_number(&self) -> i32 {
        match self.magic_number_present {
            ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_magic_number(&mut self) {
        self.magic_number_present = ::std::option::Option::None;
    }

    pub fn has_magic_number(&self) -> bool {
        match self.magic_number_present {
            ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_magic_number(&mut self, v: i32) {
        self.magic_number_present = ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(v))
    }

    // int32 version = 2;


    pub fn get_version(&self) -> i32 {
        match self.version_present {
            ::std::option::Option::Some(Packet_oneof_version_present::version(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_version(&mut self) {
        self.version_present = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        match self.version_present {
            ::std::option::Option::Some(Packet_oneof_version_present::version(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version_present = ::std::option::Option::Some(Packet_oneof_version_present::version(v))
    }

    // .PacketType type = 3;


    pub fn get_field_type(&self) -> PacketType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = PacketType::PACKAGETYPECOMPATIBLEPROTO2;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: PacketType) {
        self.field_type = v;
    }

    // bytes body = 4;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Packet {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.magic_number_present = ::std::option::Option::Some(Packet_oneof_magic_number_present::magic_number(is.read_int32()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.version_present = ::std::option::Option::Some(Packet_oneof_version_present::version(is.read_int32()?));
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != PacketType::PACKAGETYPECOMPATIBLEPROTO2 {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.body);
        }
        if let ::std::option::Option::Some(ref v) = self.magic_number_present {
            match v {
                &Packet_oneof_magic_number_present::magic_number(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Packet_oneof_version_present::version(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != PacketType::PACKAGETYPECOMPATIBLEPROTO2 {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if !self.body.is_empty() {
            os.write_bytes(4, &self.body)?;
        }
        if let ::std::option::Option::Some(ref v) = self.magic_number_present {
            match v {
                &Packet_oneof_magic_number_present::magic_number(v) => {
                    os.write_int32(1, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Packet_oneof_version_present::version(v) => {
                    os.write_int32(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Packet {
        Packet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "magic_number",
                Packet::has_magic_number,
                Packet::get_magic_number,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "version",
                Packet::has_version,
                Packet::get_version,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PacketType>>(
                "type",
                |m: &Packet| { &m.field_type },
                |m: &mut Packet| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body",
                |m: &Packet| { &m.body },
                |m: &mut Packet| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Packet>(
                "Packet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Packet {
        static instance: ::protobuf::rt::LazyV2<Packet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Packet::new)
    }
}

impl ::protobuf::Clear for Packet {
    fn clear(&mut self) {
        self.magic_number_present = ::std::option::Option::None;
        self.version_present = ::std::option::Option::None;
        self.field_type = PacketType::PACKAGETYPECOMPATIBLEPROTO2;
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Packet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Packet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ack {
    // message fields
    pub message: ::std::string::String,
    // message oneof groups
    pub error_code_present: ::std::option::Option<Ack_oneof_error_code_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ack {
    fn default() -> &'a Ack {
        <Ack as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Ack_oneof_error_code_present {
    code(i32),
}

impl Ack {
    pub fn new() -> Ack {
        ::std::default::Default::default()
    }

    // int32 code = 1;


    pub fn get_code(&self) -> i32 {
        match self.error_code_present {
            ::std::option::Option::Some(Ack_oneof_error_code_present::code(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_code(&mut self) {
        self.error_code_present = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        match self.error_code_present {
            ::std::option::Option::Some(Ack_oneof_error_code_present::code(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: i32) {
        self.error_code_present = ::std::option::Option::Some(Ack_oneof_error_code_present::code(v))
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Ack {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error_code_present = ::std::option::Option::Some(Ack_oneof_error_code_present::code(is.read_int32()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let ::std::option::Option::Some(ref v) = self.error_code_present {
            match v {
                &Ack_oneof_error_code_present::code(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let ::std::option::Option::Some(ref v) = self.error_code_present {
            match v {
                &Ack_oneof_error_code_present::code(v) => {
                    os.write_int32(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ack {
        Ack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "code",
                Ack::has_code,
                Ack::get_code,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &Ack| { &m.message },
                |m: &mut Ack| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ack>(
                "Ack",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Ack {
        static instance: ::protobuf::rt::LazyV2<Ack> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Ack::new)
    }
}

impl ::protobuf::Clear for Ack {
    fn clear(&mut self) {
        self.error_code_present = ::std::option::Option::None;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ack {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Handshake {
    // message fields
    pub seeds: ::std::vec::Vec<u8>,
    // message oneof groups
    pub communication_encoding_present: ::std::option::Option<Handshake_oneof_communication_encoding_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Handshake {
    fn default() -> &'a Handshake {
        <Handshake as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Handshake_oneof_communication_encoding_present {
    communication_encoding(::std::string::String),
}

impl Handshake {
    pub fn new() -> Handshake {
        ::std::default::Default::default()
    }

    // string communication_encoding = 1;


    pub fn get_communication_encoding(&self) -> &str {
        match self.communication_encoding_present {
            ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_communication_encoding(&mut self) {
        self.communication_encoding_present = ::std::option::Option::None;
    }

    pub fn has_communication_encoding(&self) -> bool {
        match self.communication_encoding_present {
            ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_communication_encoding(&mut self, v: ::std::string::String) {
        self.communication_encoding_present = ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(v))
    }

    // Mutable pointer to the field.
    pub fn mut_communication_encoding(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(_)) = self.communication_encoding_present {
        } else {
            self.communication_encoding_present = ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(::std::string::String::new()));
        }
        match self.communication_encoding_present {
            ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_communication_encoding(&mut self) -> ::std::string::String {
        if self.has_communication_encoding() {
            match self.communication_encoding_present.take() {
                ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes seeds = 2;


    pub fn get_seeds(&self) -> &[u8] {
        &self.seeds
    }
    pub fn clear_seeds(&mut self) {
        self.seeds.clear();
    }

    // Param is passed by value, moved
    pub fn set_seeds(&mut self, v: ::std::vec::Vec<u8>) {
        self.seeds = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seeds(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.seeds
    }

    // Take field
    pub fn take_seeds(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.seeds, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Handshake {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.communication_encoding_present = ::std::option::Option::Some(Handshake_oneof_communication_encoding_present::communication_encoding(is.read_string()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.seeds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seeds.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.seeds);
        }
        if let ::std::option::Option::Some(ref v) = self.communication_encoding_present {
            match v {
                &Handshake_oneof_communication_encoding_present::communication_encoding(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seeds.is_empty() {
            os.write_bytes(2, &self.seeds)?;
        }
        if let ::std::option::Option::Some(ref v) = self.communication_encoding_present {
            match v {
                &Handshake_oneof_communication_encoding_present::communication_encoding(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Handshake {
        Handshake::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "communication_encoding",
                Handshake::has_communication_encoding,
                Handshake::get_communication_encoding,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "seeds",
                |m: &Handshake| { &m.seeds },
                |m: &mut Handshake| { &mut m.seeds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Handshake>(
                "Handshake",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Handshake {
        static instance: ::protobuf::rt::LazyV2<Handshake> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Handshake::new)
    }
}

impl ::protobuf::Clear for Handshake {
    fn clear(&mut self) {
        self.communication_encoding_present = ::std::option::Option::None;
        self.seeds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Handshake {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Handshake {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientAuth {
    // message fields
    pub username: ::std::string::String,
    pub password: ::std::vec::Vec<u8>,
    // message oneof groups
    pub net_read_timeout_present: ::std::option::Option<ClientAuth_oneof_net_read_timeout_present>,
    pub net_write_timeout_present: ::std::option::Option<ClientAuth_oneof_net_write_timeout_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientAuth {
    fn default() -> &'a ClientAuth {
        <ClientAuth as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientAuth_oneof_net_read_timeout_present {
    net_read_timeout(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum ClientAuth_oneof_net_write_timeout_present {
    net_write_timeout(i32),
}

impl ClientAuth {
    pub fn new() -> ClientAuth {
        ::std::default::Default::default()
    }

    // string username = 1;


    pub fn get_username(&self) -> &str {
        &self.username
    }
    pub fn clear_username(&mut self) {
        self.username.clear();
    }

    // Param is passed by value, moved
    pub fn set_username(&mut self, v: ::std::string::String) {
        self.username = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username(&mut self) -> &mut ::std::string::String {
        &mut self.username
    }

    // Take field
    pub fn take_username(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.username, ::std::string::String::new())
    }

    // bytes password = 2;


    pub fn get_password(&self) -> &[u8] {
        &self.password
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::vec::Vec<u8>) {
        self.password = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.password
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.password, ::std::vec::Vec::new())
    }

    // int32 net_read_timeout = 3;


    pub fn get_net_read_timeout(&self) -> i32 {
        match self.net_read_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_net_read_timeout(&mut self) {
        self.net_read_timeout_present = ::std::option::Option::None;
    }

    pub fn has_net_read_timeout(&self) -> bool {
        match self.net_read_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_net_read_timeout(&mut self, v: i32) {
        self.net_read_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v))
    }

    // int32 net_write_timeout = 4;


    pub fn get_net_write_timeout(&self) -> i32 {
        match self.net_write_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_net_write_timeout(&mut self) {
        self.net_write_timeout_present = ::std::option::Option::None;
    }

    pub fn has_net_write_timeout(&self) -> bool {
        match self.net_write_timeout_present {
            ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_net_write_timeout(&mut self, v: i32) {
        self.net_write_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v))
    }
}

impl ::protobuf::Message for ClientAuth {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.username)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.password)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.net_read_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_read_timeout_present::net_read_timeout(is.read_int32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.net_write_timeout_present = ::std::option::Option::Some(ClientAuth_oneof_net_write_timeout_present::net_write_timeout(is.read_int32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.username.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.username);
        }
        if !self.password.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.password);
        }
        if let ::std::option::Option::Some(ref v) = self.net_read_timeout_present {
            match v {
                &ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.net_write_timeout_present {
            match v {
                &ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.username.is_empty() {
            os.write_string(1, &self.username)?;
        }
        if !self.password.is_empty() {
            os.write_bytes(2, &self.password)?;
        }
        if let ::std::option::Option::Some(ref v) = self.net_read_timeout_present {
            match v {
                &ClientAuth_oneof_net_read_timeout_present::net_read_timeout(v) => {
                    os.write_int32(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.net_write_timeout_present {
            match v {
                &ClientAuth_oneof_net_write_timeout_present::net_write_timeout(v) => {
                    os.write_int32(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientAuth {
        ClientAuth::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "username",
                |m: &ClientAuth| { &m.username },
                |m: &mut ClientAuth| { &mut m.username },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "password",
                |m: &ClientAuth| { &m.password },
                |m: &mut ClientAuth| { &mut m.password },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "net_read_timeout",
                ClientAuth::has_net_read_timeout,
                ClientAuth::get_net_read_timeout,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "net_write_timeout",
                ClientAuth::has_net_write_timeout,
                ClientAuth::get_net_write_timeout,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientAuth>(
                "ClientAuth",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientAuth {
        static instance: ::protobuf::rt::LazyV2<ClientAuth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientAuth::new)
    }
}

impl ::protobuf::Clear for ClientAuth {
    fn clear(&mut self) {
        self.username.clear();
        self.password.clear();
        self.net_read_timeout_present = ::std::option::Option::None;
        self.net_write_timeout_present = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientAuth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientAuth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerAdmin {
    // message fields
    pub action: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerAdmin {
    fn default() -> &'a ServerAdmin {
        <ServerAdmin as ::protobuf::Message>::default_instance()
    }
}

impl ServerAdmin {
    pub fn new() -> ServerAdmin {
        ::std::default::Default::default()
    }

    // string action = 1;


    pub fn get_action(&self) -> &str {
        &self.action
    }
    pub fn clear_action(&mut self) {
        self.action.clear();
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::std::string::String) {
        self.action = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ::std::string::String {
        &mut self.action
    }

    // Take field
    pub fn take_action(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.action, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ServerAdmin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.action)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.action.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.action);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.action.is_empty() {
            os.write_string(1, &self.action)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerAdmin {
        ServerAdmin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "action",
                |m: &ServerAdmin| { &m.action },
                |m: &mut ServerAdmin| { &mut m.action },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerAdmin>(
                "ServerAdmin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerAdmin {
        static instance: ::protobuf::rt::LazyV2<ServerAdmin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerAdmin::new)
    }
}

impl ::protobuf::Clear for ServerAdmin {
    fn clear(&mut self) {
        self.action.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerAdmin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerAdmin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstanceAdmin {
    // message fields
    pub destination: ::std::string::String,
    pub action: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InstanceAdmin {
    fn default() -> &'a InstanceAdmin {
        <InstanceAdmin as ::protobuf::Message>::default_instance()
    }
}

impl InstanceAdmin {
    pub fn new() -> InstanceAdmin {
        ::std::default::Default::default()
    }

    // string destination = 1;


    pub fn get_destination(&self) -> &str {
        &self.destination
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        &mut self.destination
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination, ::std::string::String::new())
    }

    // string action = 2;


    pub fn get_action(&self) -> &str {
        &self.action
    }
    pub fn clear_action(&mut self) {
        self.action.clear();
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::std::string::String) {
        self.action = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ::std::string::String {
        &mut self.action
    }

    // Take field
    pub fn take_action(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.action, ::std::string::String::new())
    }
}

impl ::protobuf::Message for InstanceAdmin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.action)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.destination.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.destination);
        }
        if !self.action.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.action);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.destination.is_empty() {
            os.write_string(1, &self.destination)?;
        }
        if !self.action.is_empty() {
            os.write_string(2, &self.action)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstanceAdmin {
        InstanceAdmin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "destination",
                |m: &InstanceAdmin| { &m.destination },
                |m: &mut InstanceAdmin| { &mut m.destination },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "action",
                |m: &InstanceAdmin| { &m.action },
                |m: &mut InstanceAdmin| { &mut m.action },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InstanceAdmin>(
                "InstanceAdmin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InstanceAdmin {
        static instance: ::protobuf::rt::LazyV2<InstanceAdmin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InstanceAdmin::new)
    }
}

impl ::protobuf::Clear for InstanceAdmin {
    fn clear(&mut self) {
        self.destination.clear();
        self.action.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstanceAdmin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceAdmin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogAdmin {
    // message fields
    pub field_type: ::std::string::String,
    pub action: ::std::string::String,
    // message oneof groups
    pub destination_present: ::std::option::Option<LogAdmin_oneof_destination_present>,
    pub file_present: ::std::option::Option<LogAdmin_oneof_file_present>,
    pub count_present: ::std::option::Option<LogAdmin_oneof_count_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogAdmin {
    fn default() -> &'a LogAdmin {
        <LogAdmin as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogAdmin_oneof_destination_present {
    destination(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogAdmin_oneof_file_present {
    file(::std::string::String),
}

#[derive(Clone,PartialEq,Debug)]
pub enum LogAdmin_oneof_count_present {
    count(i32),
}

impl LogAdmin {
    pub fn new() -> LogAdmin {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string action = 2;


    pub fn get_action(&self) -> &str {
        &self.action
    }
    pub fn clear_action(&mut self) {
        self.action.clear();
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::std::string::String) {
        self.action = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ::std::string::String {
        &mut self.action
    }

    // Take field
    pub fn take_action(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.action, ::std::string::String::new())
    }

    // string destination = 3;


    pub fn get_destination(&self) -> &str {
        match self.destination_present {
            ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_destination(&mut self) {
        self.destination_present = ::std::option::Option::None;
    }

    pub fn has_destination(&self) -> bool {
        match self.destination_present {
            ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: ::std::string::String) {
        self.destination_present = ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(v))
    }

    // Mutable pointer to the field.
    pub fn mut_destination(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(_)) = self.destination_present {
        } else {
            self.destination_present = ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(::std::string::String::new()));
        }
        match self.destination_present {
            ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_destination(&mut self) -> ::std::string::String {
        if self.has_destination() {
            match self.destination_present.take() {
                ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string file = 4;


    pub fn get_file(&self) -> &str {
        match self.file_present {
            ::std::option::Option::Some(LogAdmin_oneof_file_present::file(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_file(&mut self) {
        self.file_present = ::std::option::Option::None;
    }

    pub fn has_file(&self) -> bool {
        match self.file_present {
            ::std::option::Option::Some(LogAdmin_oneof_file_present::file(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: ::std::string::String) {
        self.file_present = ::std::option::Option::Some(LogAdmin_oneof_file_present::file(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(LogAdmin_oneof_file_present::file(_)) = self.file_present {
        } else {
            self.file_present = ::std::option::Option::Some(LogAdmin_oneof_file_present::file(::std::string::String::new()));
        }
        match self.file_present {
            ::std::option::Option::Some(LogAdmin_oneof_file_present::file(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file(&mut self) -> ::std::string::String {
        if self.has_file() {
            match self.file_present.take() {
                ::std::option::Option::Some(LogAdmin_oneof_file_present::file(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // int32 count = 5;


    pub fn get_count(&self) -> i32 {
        match self.count_present {
            ::std::option::Option::Some(LogAdmin_oneof_count_present::count(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_count(&mut self) {
        self.count_present = ::std::option::Option::None;
    }

    pub fn has_count(&self) -> bool {
        match self.count_present {
            ::std::option::Option::Some(LogAdmin_oneof_count_present::count(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count_present = ::std::option::Option::Some(LogAdmin_oneof_count_present::count(v))
    }
}

impl ::protobuf::Message for LogAdmin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.action)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.destination_present = ::std::option::Option::Some(LogAdmin_oneof_destination_present::destination(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.file_present = ::std::option::Option::Some(LogAdmin_oneof_file_present::file(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.count_present = ::std::option::Option::Some(LogAdmin_oneof_count_present::count(is.read_int32()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.action.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.action);
        }
        if let ::std::option::Option::Some(ref v) = self.destination_present {
            match v {
                &LogAdmin_oneof_destination_present::destination(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.file_present {
            match v {
                &LogAdmin_oneof_file_present::file(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.count_present {
            match v {
                &LogAdmin_oneof_count_present::count(v) => {
                    my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.action.is_empty() {
            os.write_string(2, &self.action)?;
        }
        if let ::std::option::Option::Some(ref v) = self.destination_present {
            match v {
                &LogAdmin_oneof_destination_present::destination(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.file_present {
            match v {
                &LogAdmin_oneof_file_present::file(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.count_present {
            match v {
                &LogAdmin_oneof_count_present::count(v) => {
                    os.write_int32(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogAdmin {
        LogAdmin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &LogAdmin| { &m.field_type },
                |m: &mut LogAdmin| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "action",
                |m: &LogAdmin| { &m.action },
                |m: &mut LogAdmin| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "destination",
                LogAdmin::has_destination,
                LogAdmin::get_destination,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "file",
                LogAdmin::has_file,
                LogAdmin::get_file,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "count",
                LogAdmin::has_count,
                LogAdmin::get_count,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogAdmin>(
                "LogAdmin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogAdmin {
        static instance: ::protobuf::rt::LazyV2<LogAdmin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogAdmin::new)
    }
}

impl ::protobuf::Clear for LogAdmin {
    fn clear(&mut self) {
        self.field_type.clear();
        self.action.clear();
        self.destination_present = ::std::option::Option::None;
        self.file_present = ::std::option::Option::None;
        self.count_present = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogAdmin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogAdmin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PacketType {
    PACKAGETYPECOMPATIBLEPROTO2 = 0,
    HANDSHAKE = 1,
    CLIENTAUTHENTICATION = 2,
    ACK = 3,
    SERVER = 4,
    INSTANCE = 5,
    LOG = 6,
}

impl ::protobuf::ProtobufEnum for PacketType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PacketType> {
        match value {
            0 => ::std::option::Option::Some(PacketType::PACKAGETYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(PacketType::HANDSHAKE),
            2 => ::std::option::Option::Some(PacketType::CLIENTAUTHENTICATION),
            3 => ::std::option::Option::Some(PacketType::ACK),
            4 => ::std::option::Option::Some(PacketType::SERVER),
            5 => ::std::option::Option::Some(PacketType::INSTANCE),
            6 => ::std::option::Option::Some(PacketType::LOG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PacketType] = &[
            PacketType::PACKAGETYPECOMPATIBLEPROTO2,
            PacketType::HANDSHAKE,
            PacketType::CLIENTAUTHENTICATION,
            PacketType::ACK,
            PacketType::SERVER,
            PacketType::INSTANCE,
            PacketType::LOG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<PacketType>("PacketType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for PacketType {
}

impl ::std::default::Default for PacketType {
    fn default() -> Self {
        PacketType::PACKAGETYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13AdminProtocol.proto\"\xb3\x01\n\x06Packet\x12%\n\x0cmagic_number\
    \x18\x01\x20\x01(\x05H\0R\x0bmagicNumberB\0\x12\x1c\n\x07version\x18\x02\
    \x20\x01(\x05H\x01R\x07versionB\0\x12!\n\x04type\x18\x03\x20\x01(\x0e2\
    \x0b.PacketTypeR\x04typeB\0\x12\x14\n\x04body\x18\x04\x20\x01(\x0cR\x04b\
    odyB\0B\x16\n\x14magic_number_presentB\x11\n\x0fversion_present:\0\"Q\n\
    \x03Ack\x12\x16\n\x04code\x18\x01\x20\x01(\x05H\0R\x04codeB\0\x12\x1a\n\
    \x07message\x18\x02\x20\x01(\tR\x07messageB\0B\x14\n\x12error_code_prese\
    nt:\0\"\x82\x01\n\tHandshake\x129\n\x16communication_encoding\x18\x01\
    \x20\x01(\tH\0R\x15communicationEncodingB\0\x12\x16\n\x05seeds\x18\x02\
    \x20\x01(\x0cR\x05seedsB\0B\x20\n\x1ecommunication_encoding_present:\0\"\
    \xe1\x01\n\nClientAuth\x12\x1c\n\x08username\x18\x01\x20\x01(\tR\x08user\
    nameB\0\x12\x1c\n\x08password\x18\x02\x20\x01(\x0cR\x08passwordB\0\x12,\
    \n\x10net_read_timeout\x18\x03\x20\x01(\x05H\0R\x0enetReadTimeoutB\0\x12\
    .\n\x11net_write_timeout\x18\x04\x20\x01(\x05H\x01R\x0fnetWriteTimeoutB\
    \0B\x1a\n\x18net_read_timeout_presentB\x1b\n\x19net_write_timeout_presen\
    t:\0\")\n\x0bServerAdmin\x12\x18\n\x06action\x18\x01\x20\x01(\tR\x06acti\
    onB\0:\0\"O\n\rInstanceAdmin\x12\"\n\x0bdestination\x18\x01\x20\x01(\tR\
    \x0bdestinationB\0\x12\x18\n\x06action\x18\x02\x20\x01(\tR\x06actionB\0:\
    \0\"\xcc\x01\n\x08LogAdmin\x12\x14\n\x04type\x18\x01\x20\x01(\tR\x04type\
    B\0\x12\x18\n\x06action\x18\x02\x20\x01(\tR\x06actionB\0\x12$\n\x0bdesti\
    nation\x18\x03\x20\x01(\tH\0R\x0bdestinationB\0\x12\x16\n\x04file\x18\
    \x04\x20\x01(\tH\x01R\x04fileB\0\x12\x18\n\x05count\x18\x05\x20\x01(\x05\
    H\x02R\x05countB\0B\x15\n\x13destination_presentB\x0e\n\x0cfile_presentB\
    \x0f\n\rcount_present:\0*\x84\x01\n\nPacketType\x12\x1f\n\x1bPACKAGETYPE\
    COMPATIBLEPROTO2\x10\0\x12\r\n\tHANDSHAKE\x10\x01\x12\x18\n\x14CLIENTAUT\
    HENTICATION\x10\x02\x12\x07\n\x03ACK\x10\x03\x12\n\n\x06SERVER\x10\x04\
    \x12\x0c\n\x08INSTANCE\x10\x05\x12\x07\n\x03LOG\x10\x06\x1a\0B\0b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
