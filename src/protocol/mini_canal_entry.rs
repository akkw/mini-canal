// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mini_canal_entry.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Entry {
    // message fields
    pub header: ::protobuf::SingularPtrField<Header>,
    pub storeValue: ::std::vec::Vec<u8>,
    // message oneof groups
    pub entryType_present: ::std::option::Option<Entry_oneof_entryType_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Entry {
    fn default() -> &'a Entry {
        <Entry as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Entry_oneof_entryType_present {
    entryType(EntryType),
}

impl Entry {
    pub fn new() -> Entry {
        ::std::default::Default::default()
    }

    // .Header header = 1;


    pub fn get_header(&self) -> &Header {
        self.header.as_ref().unwrap_or_else(|| <Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> Header {
        self.header.take().unwrap_or_else(|| Header::new())
    }

    // .EntryType entryType = 2;


    pub fn get_entryType(&self) -> EntryType {
        match self.entryType_present {
            ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(v)) => v,
            _ => EntryType::ENTRYTYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_entryType(&mut self) {
        self.entryType_present = ::std::option::Option::None;
    }

    pub fn has_entryType(&self) -> bool {
        match self.entryType_present {
            ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_entryType(&mut self, v: EntryType) {
        self.entryType_present = ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(v))
    }

    // bytes storeValue = 3;


    pub fn get_storeValue(&self) -> &[u8] {
        &self.storeValue
    }
    pub fn clear_storeValue(&mut self) {
        self.storeValue.clear();
    }

    // Param is passed by value, moved
    pub fn set_storeValue(&mut self, v: ::std::vec::Vec<u8>) {
        self.storeValue = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_storeValue(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.storeValue
    }

    // Take field
    pub fn take_storeValue(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.storeValue, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Entry {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.entryType_present = ::std::option::Option::Some(Entry_oneof_entryType_present::entryType(is.read_enum()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.storeValue)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.storeValue.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.storeValue);
        }
        if let ::std::option::Option::Some(ref v) = self.entryType_present {
            match v {
                &Entry_oneof_entryType_present::entryType(v) => {
                    my_size += ::protobuf::rt::enum_size(2, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.storeValue.is_empty() {
            os.write_bytes(3, &self.storeValue)?;
        }
        if let ::std::option::Option::Some(ref v) = self.entryType_present {
            match v {
                &Entry_oneof_entryType_present::entryType(v) => {
                    os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Entry {
        Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                "header",
                |m: &Entry| { &m.header },
                |m: &mut Entry| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, EntryType>(
                "entryType",
                Entry::has_entryType,
                Entry::get_entryType,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "storeValue",
                |m: &Entry| { &m.storeValue },
                |m: &mut Entry| { &mut m.storeValue },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Entry>(
                "Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Entry {
        static instance: ::protobuf::rt::LazyV2<Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Entry::new)
    }
}

impl ::protobuf::Clear for Entry {
    fn clear(&mut self) {
        self.header.clear();
        self.entryType_present = ::std::option::Option::None;
        self.storeValue.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub logfileName: ::std::string::String,
    pub logfileOffset: i64,
    pub serverId: i64,
    pub serverenCode: ::std::string::String,
    pub executeTime: i64,
    pub schemaName: ::std::string::String,
    pub tableName: ::std::string::String,
    pub eventLength: i64,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub gtid: ::std::string::String,
    // message oneof groups
    pub version_present: ::std::option::Option<Header_oneof_version_present>,
    pub sourceType_present: ::std::option::Option<Header_oneof_sourceType_present>,
    pub eventType_present: ::std::option::Option<Header_oneof_eventType_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Header_oneof_version_present {
    version(i32),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Header_oneof_sourceType_present {
    sourceType(Type),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Header_oneof_eventType_present {
    eventType(EventType),
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // int32 version = 1;


    pub fn get_version(&self) -> i32 {
        match self.version_present {
            ::std::option::Option::Some(Header_oneof_version_present::version(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_version(&mut self) {
        self.version_present = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        match self.version_present {
            ::std::option::Option::Some(Header_oneof_version_present::version(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version_present = ::std::option::Option::Some(Header_oneof_version_present::version(v))
    }

    // string logfileName = 2;


    pub fn get_logfileName(&self) -> &str {
        &self.logfileName
    }
    pub fn clear_logfileName(&mut self) {
        self.logfileName.clear();
    }

    // Param is passed by value, moved
    pub fn set_logfileName(&mut self, v: ::std::string::String) {
        self.logfileName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logfileName(&mut self) -> &mut ::std::string::String {
        &mut self.logfileName
    }

    // Take field
    pub fn take_logfileName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.logfileName, ::std::string::String::new())
    }

    // int64 logfileOffset = 3;


    pub fn get_logfileOffset(&self) -> i64 {
        self.logfileOffset
    }
    pub fn clear_logfileOffset(&mut self) {
        self.logfileOffset = 0;
    }

    // Param is passed by value, moved
    pub fn set_logfileOffset(&mut self, v: i64) {
        self.logfileOffset = v;
    }

    // int64 serverId = 4;


    pub fn get_serverId(&self) -> i64 {
        self.serverId
    }
    pub fn clear_serverId(&mut self) {
        self.serverId = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: i64) {
        self.serverId = v;
    }

    // string serverenCode = 5;


    pub fn get_serverenCode(&self) -> &str {
        &self.serverenCode
    }
    pub fn clear_serverenCode(&mut self) {
        self.serverenCode.clear();
    }

    // Param is passed by value, moved
    pub fn set_serverenCode(&mut self, v: ::std::string::String) {
        self.serverenCode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serverenCode(&mut self) -> &mut ::std::string::String {
        &mut self.serverenCode
    }

    // Take field
    pub fn take_serverenCode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serverenCode, ::std::string::String::new())
    }

    // int64 executeTime = 6;


    pub fn get_executeTime(&self) -> i64 {
        self.executeTime
    }
    pub fn clear_executeTime(&mut self) {
        self.executeTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_executeTime(&mut self, v: i64) {
        self.executeTime = v;
    }

    // .Type sourceType = 7;


    pub fn get_sourceType(&self) -> Type {
        match self.sourceType_present {
            ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(v)) => v,
            _ => Type::TYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_sourceType(&mut self) {
        self.sourceType_present = ::std::option::Option::None;
    }

    pub fn has_sourceType(&self) -> bool {
        match self.sourceType_present {
            ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sourceType(&mut self, v: Type) {
        self.sourceType_present = ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(v))
    }

    // string schemaName = 8;


    pub fn get_schemaName(&self) -> &str {
        &self.schemaName
    }
    pub fn clear_schemaName(&mut self) {
        self.schemaName.clear();
    }

    // Param is passed by value, moved
    pub fn set_schemaName(&mut self, v: ::std::string::String) {
        self.schemaName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schemaName(&mut self) -> &mut ::std::string::String {
        &mut self.schemaName
    }

    // Take field
    pub fn take_schemaName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.schemaName, ::std::string::String::new())
    }

    // string tableName = 9;


    pub fn get_tableName(&self) -> &str {
        &self.tableName
    }
    pub fn clear_tableName(&mut self) {
        self.tableName.clear();
    }

    // Param is passed by value, moved
    pub fn set_tableName(&mut self, v: ::std::string::String) {
        self.tableName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tableName(&mut self) -> &mut ::std::string::String {
        &mut self.tableName
    }

    // Take field
    pub fn take_tableName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tableName, ::std::string::String::new())
    }

    // int64 eventLength = 10;


    pub fn get_eventLength(&self) -> i64 {
        self.eventLength
    }
    pub fn clear_eventLength(&mut self) {
        self.eventLength = 0;
    }

    // Param is passed by value, moved
    pub fn set_eventLength(&mut self, v: i64) {
        self.eventLength = v;
    }

    // .EventType eventType = 11;


    pub fn get_eventType(&self) -> EventType {
        match self.eventType_present {
            ::std::option::Option::Some(Header_oneof_eventType_present::eventType(v)) => v,
            _ => EventType::EVENTTYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_eventType(&mut self) {
        self.eventType_present = ::std::option::Option::None;
    }

    pub fn has_eventType(&self) -> bool {
        match self.eventType_present {
            ::std::option::Option::Some(Header_oneof_eventType_present::eventType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_eventType(&mut self, v: EventType) {
        self.eventType_present = ::std::option::Option::Some(Header_oneof_eventType_present::eventType(v))
    }

    // repeated .Pair props = 12;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // string gtid = 13;


    pub fn get_gtid(&self) -> &str {
        &self.gtid
    }
    pub fn clear_gtid(&mut self) {
        self.gtid.clear();
    }

    // Param is passed by value, moved
    pub fn set_gtid(&mut self, v: ::std::string::String) {
        self.gtid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gtid(&mut self) -> &mut ::std::string::String {
        &mut self.gtid
    }

    // Take field
    pub fn take_gtid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gtid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.version_present = ::std::option::Option::Some(Header_oneof_version_present::version(is.read_int32()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.logfileName)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.logfileOffset = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.serverId = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serverenCode)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.executeTime = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sourceType_present = ::std::option::Option::Some(Header_oneof_sourceType_present::sourceType(is.read_enum()?));
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.schemaName)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tableName)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.eventLength = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.eventType_present = ::std::option::Option::Some(Header_oneof_eventType_present::eventType(is.read_enum()?));
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gtid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.logfileName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.logfileName);
        }
        if self.logfileOffset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.logfileOffset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.serverId != 0 {
            my_size += ::protobuf::rt::value_size(4, self.serverId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.serverenCode.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.serverenCode);
        }
        if self.executeTime != 0 {
            my_size += ::protobuf::rt::value_size(6, self.executeTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.schemaName.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.schemaName);
        }
        if !self.tableName.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.tableName);
        }
        if self.eventLength != 0 {
            my_size += ::protobuf::rt::value_size(10, self.eventLength, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.gtid.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.gtid);
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Header_oneof_version_present::version(v) => {
                    my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.sourceType_present {
            match v {
                &Header_oneof_sourceType_present::sourceType(v) => {
                    my_size += ::protobuf::rt::enum_size(7, v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &Header_oneof_eventType_present::eventType(v) => {
                    my_size += ::protobuf::rt::enum_size(11, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.logfileName.is_empty() {
            os.write_string(2, &self.logfileName)?;
        }
        if self.logfileOffset != 0 {
            os.write_int64(3, self.logfileOffset)?;
        }
        if self.serverId != 0 {
            os.write_int64(4, self.serverId)?;
        }
        if !self.serverenCode.is_empty() {
            os.write_string(5, &self.serverenCode)?;
        }
        if self.executeTime != 0 {
            os.write_int64(6, self.executeTime)?;
        }
        if !self.schemaName.is_empty() {
            os.write_string(8, &self.schemaName)?;
        }
        if !self.tableName.is_empty() {
            os.write_string(9, &self.tableName)?;
        }
        if self.eventLength != 0 {
            os.write_int64(10, self.eventLength)?;
        }
        for v in &self.props {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.gtid.is_empty() {
            os.write_string(13, &self.gtid)?;
        }
        if let ::std::option::Option::Some(ref v) = self.version_present {
            match v {
                &Header_oneof_version_present::version(v) => {
                    os.write_int32(1, v)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.sourceType_present {
            match v {
                &Header_oneof_sourceType_present::sourceType(v) => {
                    os.write_enum(7, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &Header_oneof_eventType_present::eventType(v) => {
                    os.write_enum(11, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor::<_>(
                "version",
                Header::has_version,
                Header::get_version,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "logfileName",
                |m: &Header| { &m.logfileName },
                |m: &mut Header| { &mut m.logfileName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "logfileOffset",
                |m: &Header| { &m.logfileOffset },
                |m: &mut Header| { &mut m.logfileOffset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "serverId",
                |m: &Header| { &m.serverId },
                |m: &mut Header| { &mut m.serverId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "serverenCode",
                |m: &Header| { &m.serverenCode },
                |m: &mut Header| { &mut m.serverenCode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "executeTime",
                |m: &Header| { &m.executeTime },
                |m: &mut Header| { &mut m.executeTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, Type>(
                "sourceType",
                Header::has_sourceType,
                Header::get_sourceType,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "schemaName",
                |m: &Header| { &m.schemaName },
                |m: &mut Header| { &mut m.schemaName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tableName",
                |m: &Header| { &m.tableName },
                |m: &mut Header| { &mut m.tableName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "eventLength",
                |m: &Header| { &m.eventLength },
                |m: &mut Header| { &mut m.eventLength },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, EventType>(
                "eventType",
                Header::has_eventType,
                Header::get_eventType,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "props",
                |m: &Header| { &m.props },
                |m: &mut Header| { &mut m.props },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gtid",
                |m: &Header| { &m.gtid },
                |m: &mut Header| { &mut m.gtid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Header>(
                "Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.version_present = ::std::option::Option::None;
        self.logfileName.clear();
        self.logfileOffset = 0;
        self.serverId = 0;
        self.serverenCode.clear();
        self.executeTime = 0;
        self.sourceType_present = ::std::option::Option::None;
        self.schemaName.clear();
        self.tableName.clear();
        self.eventLength = 0;
        self.eventType_present = ::std::option::Option::None;
        self.props.clear();
        self.gtid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Column {
    // message fields
    pub index: i32,
    pub sqlType: i32,
    pub name: ::std::string::String,
    pub isKey: bool,
    pub updated: bool,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub value: ::std::string::String,
    pub length: i32,
    pub mysqlType: ::std::string::String,
    // message oneof groups
    pub isNull_present: ::std::option::Option<Column_oneof_isNull_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Column {
    fn default() -> &'a Column {
        <Column as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Column_oneof_isNull_present {
    isNull(bool),
}

impl Column {
    pub fn new() -> Column {
        ::std::default::Default::default()
    }

    // int32 index = 1;


    pub fn get_index(&self) -> i32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i32) {
        self.index = v;
    }

    // int32 sqlType = 2;


    pub fn get_sqlType(&self) -> i32 {
        self.sqlType
    }
    pub fn clear_sqlType(&mut self) {
        self.sqlType = 0;
    }

    // Param is passed by value, moved
    pub fn set_sqlType(&mut self, v: i32) {
        self.sqlType = v;
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool isKey = 4;


    pub fn get_isKey(&self) -> bool {
        self.isKey
    }
    pub fn clear_isKey(&mut self) {
        self.isKey = false;
    }

    // Param is passed by value, moved
    pub fn set_isKey(&mut self, v: bool) {
        self.isKey = v;
    }

    // bool updated = 5;


    pub fn get_updated(&self) -> bool {
        self.updated
    }
    pub fn clear_updated(&mut self) {
        self.updated = false;
    }

    // Param is passed by value, moved
    pub fn set_updated(&mut self, v: bool) {
        self.updated = v;
    }

    // bool isNull = 6;


    pub fn get_isNull(&self) -> bool {
        match self.isNull_present {
            ::std::option::Option::Some(Column_oneof_isNull_present::isNull(v)) => v,
            _ => false,
        }
    }
    pub fn clear_isNull(&mut self) {
        self.isNull_present = ::std::option::Option::None;
    }

    pub fn has_isNull(&self) -> bool {
        match self.isNull_present {
            ::std::option::Option::Some(Column_oneof_isNull_present::isNull(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_isNull(&mut self, v: bool) {
        self.isNull_present = ::std::option::Option::Some(Column_oneof_isNull_present::isNull(v))
    }

    // repeated .Pair props = 7;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // string value = 8;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // int32 length = 9;


    pub fn get_length(&self) -> i32 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i32) {
        self.length = v;
    }

    // string mysqlType = 10;


    pub fn get_mysqlType(&self) -> &str {
        &self.mysqlType
    }
    pub fn clear_mysqlType(&mut self) {
        self.mysqlType.clear();
    }

    // Param is passed by value, moved
    pub fn set_mysqlType(&mut self, v: ::std::string::String) {
        self.mysqlType = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mysqlType(&mut self) -> &mut ::std::string::String {
        &mut self.mysqlType
    }

    // Take field
    pub fn take_mysqlType(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mysqlType, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Column {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.sqlType = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isKey = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.updated = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.isNull_present = ::std::option::Option::Some(Column_oneof_isNull_present::isNull(is.read_bool()?));
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.length = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mysqlType)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sqlType != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sqlType, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.isKey != false {
            my_size += 2;
        }
        if self.updated != false {
            my_size += 2;
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.value);
        }
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(9, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mysqlType.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.mysqlType);
        }
        if let ::std::option::Option::Some(ref v) = self.isNull_present {
            match v {
                &Column_oneof_isNull_present::isNull(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_int32(1, self.index)?;
        }
        if self.sqlType != 0 {
            os.write_int32(2, self.sqlType)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.isKey != false {
            os.write_bool(4, self.isKey)?;
        }
        if self.updated != false {
            os.write_bool(5, self.updated)?;
        }
        for v in &self.props {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.value.is_empty() {
            os.write_string(8, &self.value)?;
        }
        if self.length != 0 {
            os.write_int32(9, self.length)?;
        }
        if !self.mysqlType.is_empty() {
            os.write_string(10, &self.mysqlType)?;
        }
        if let ::std::option::Option::Some(ref v) = self.isNull_present {
            match v {
                &Column_oneof_isNull_present::isNull(v) => {
                    os.write_bool(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Column {
        Column::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "index",
                |m: &Column| { &m.index },
                |m: &mut Column| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "sqlType",
                |m: &Column| { &m.sqlType },
                |m: &mut Column| { &mut m.sqlType },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Column| { &m.name },
                |m: &mut Column| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "isKey",
                |m: &Column| { &m.isKey },
                |m: &mut Column| { &mut m.isKey },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "updated",
                |m: &Column| { &m.updated },
                |m: &mut Column| { &mut m.updated },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "isNull",
                Column::has_isNull,
                Column::get_isNull,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "props",
                |m: &Column| { &m.props },
                |m: &mut Column| { &mut m.props },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &Column| { &m.value },
                |m: &mut Column| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "length",
                |m: &Column| { &m.length },
                |m: &mut Column| { &mut m.length },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mysqlType",
                |m: &Column| { &m.mysqlType },
                |m: &mut Column| { &mut m.mysqlType },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Column>(
                "Column",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Column {
        static instance: ::protobuf::rt::LazyV2<Column> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Column::new)
    }
}

impl ::protobuf::Clear for Column {
    fn clear(&mut self) {
        self.index = 0;
        self.sqlType = 0;
        self.name.clear();
        self.isKey = false;
        self.updated = false;
        self.isNull_present = ::std::option::Option::None;
        self.props.clear();
        self.value.clear();
        self.length = 0;
        self.mysqlType.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Column {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Column {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RowData {
    // message fields
    pub beforeColumns: ::protobuf::RepeatedField<Column>,
    pub afterColumns: ::protobuf::RepeatedField<Column>,
    pub props: ::protobuf::RepeatedField<Pair>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RowData {
    fn default() -> &'a RowData {
        <RowData as ::protobuf::Message>::default_instance()
    }
}

impl RowData {
    pub fn new() -> RowData {
        ::std::default::Default::default()
    }

    // repeated .Column beforeColumns = 1;


    pub fn get_beforeColumns(&self) -> &[Column] {
        &self.beforeColumns
    }
    pub fn clear_beforeColumns(&mut self) {
        self.beforeColumns.clear();
    }

    // Param is passed by value, moved
    pub fn set_beforeColumns(&mut self, v: ::protobuf::RepeatedField<Column>) {
        self.beforeColumns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_beforeColumns(&mut self) -> &mut ::protobuf::RepeatedField<Column> {
        &mut self.beforeColumns
    }

    // Take field
    pub fn take_beforeColumns(&mut self) -> ::protobuf::RepeatedField<Column> {
        ::std::mem::replace(&mut self.beforeColumns, ::protobuf::RepeatedField::new())
    }

    // repeated .Column afterColumns = 2;


    pub fn get_afterColumns(&self) -> &[Column] {
        &self.afterColumns
    }
    pub fn clear_afterColumns(&mut self) {
        self.afterColumns.clear();
    }

    // Param is passed by value, moved
    pub fn set_afterColumns(&mut self, v: ::protobuf::RepeatedField<Column>) {
        self.afterColumns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_afterColumns(&mut self) -> &mut ::protobuf::RepeatedField<Column> {
        &mut self.afterColumns
    }

    // Take field
    pub fn take_afterColumns(&mut self) -> ::protobuf::RepeatedField<Column> {
        ::std::mem::replace(&mut self.afterColumns, ::protobuf::RepeatedField::new())
    }

    // repeated .Pair props = 3;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RowData {
    fn is_initialized(&self) -> bool {
        for v in &self.beforeColumns {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.afterColumns {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.beforeColumns)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.afterColumns)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.beforeColumns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.afterColumns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.beforeColumns {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.afterColumns {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.props {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RowData {
        RowData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Column>>(
                "beforeColumns",
                |m: &RowData| { &m.beforeColumns },
                |m: &mut RowData| { &mut m.beforeColumns },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Column>>(
                "afterColumns",
                |m: &RowData| { &m.afterColumns },
                |m: &mut RowData| { &mut m.afterColumns },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "props",
                |m: &RowData| { &m.props },
                |m: &mut RowData| { &mut m.props },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RowData>(
                "RowData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RowData {
        static instance: ::protobuf::rt::LazyV2<RowData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RowData::new)
    }
}

impl ::protobuf::Clear for RowData {
    fn clear(&mut self) {
        self.beforeColumns.clear();
        self.afterColumns.clear();
        self.props.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RowData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RowData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RowChange {
    // message fields
    pub tableId: i64,
    pub sql: ::std::string::String,
    pub rowDatas: ::protobuf::RepeatedField<RowData>,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub ddlSchemaName: ::std::string::String,
    // message oneof groups
    pub eventType_present: ::std::option::Option<RowChange_oneof_eventType_present>,
    pub isDdl_present: ::std::option::Option<RowChange_oneof_isDdl_present>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RowChange {
    fn default() -> &'a RowChange {
        <RowChange as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RowChange_oneof_eventType_present {
    eventType(EventType),
}

#[derive(Clone,PartialEq,Debug)]
pub enum RowChange_oneof_isDdl_present {
    isDdl(bool),
}

impl RowChange {
    pub fn new() -> RowChange {
        ::std::default::Default::default()
    }

    // int64 tableId = 1;


    pub fn get_tableId(&self) -> i64 {
        self.tableId
    }
    pub fn clear_tableId(&mut self) {
        self.tableId = 0;
    }

    // Param is passed by value, moved
    pub fn set_tableId(&mut self, v: i64) {
        self.tableId = v;
    }

    // .EventType eventType = 2;


    pub fn get_eventType(&self) -> EventType {
        match self.eventType_present {
            ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(v)) => v,
            _ => EventType::EVENTTYPECOMPATIBLEPROTO2,
        }
    }
    pub fn clear_eventType(&mut self) {
        self.eventType_present = ::std::option::Option::None;
    }

    pub fn has_eventType(&self) -> bool {
        match self.eventType_present {
            ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_eventType(&mut self, v: EventType) {
        self.eventType_present = ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(v))
    }

    // bool isDdl = 10;


    pub fn get_isDdl(&self) -> bool {
        match self.isDdl_present {
            ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(v)) => v,
            _ => false,
        }
    }
    pub fn clear_isDdl(&mut self) {
        self.isDdl_present = ::std::option::Option::None;
    }

    pub fn has_isDdl(&self) -> bool {
        match self.isDdl_present {
            ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_isDdl(&mut self, v: bool) {
        self.isDdl_present = ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(v))
    }

    // string sql = 11;


    pub fn get_sql(&self) -> &str {
        &self.sql
    }
    pub fn clear_sql(&mut self) {
        self.sql.clear();
    }

    // Param is passed by value, moved
    pub fn set_sql(&mut self, v: ::std::string::String) {
        self.sql = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sql(&mut self) -> &mut ::std::string::String {
        &mut self.sql
    }

    // Take field
    pub fn take_sql(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sql, ::std::string::String::new())
    }

    // repeated .RowData rowDatas = 12;


    pub fn get_rowDatas(&self) -> &[RowData] {
        &self.rowDatas
    }
    pub fn clear_rowDatas(&mut self) {
        self.rowDatas.clear();
    }

    // Param is passed by value, moved
    pub fn set_rowDatas(&mut self, v: ::protobuf::RepeatedField<RowData>) {
        self.rowDatas = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rowDatas(&mut self) -> &mut ::protobuf::RepeatedField<RowData> {
        &mut self.rowDatas
    }

    // Take field
    pub fn take_rowDatas(&mut self) -> ::protobuf::RepeatedField<RowData> {
        ::std::mem::replace(&mut self.rowDatas, ::protobuf::RepeatedField::new())
    }

    // repeated .Pair props = 13;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // string ddlSchemaName = 14;


    pub fn get_ddlSchemaName(&self) -> &str {
        &self.ddlSchemaName
    }
    pub fn clear_ddlSchemaName(&mut self) {
        self.ddlSchemaName.clear();
    }

    // Param is passed by value, moved
    pub fn set_ddlSchemaName(&mut self, v: ::std::string::String) {
        self.ddlSchemaName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ddlSchemaName(&mut self) -> &mut ::std::string::String {
        &mut self.ddlSchemaName
    }

    // Take field
    pub fn take_ddlSchemaName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ddlSchemaName, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RowChange {
    fn is_initialized(&self) -> bool {
        for v in &self.rowDatas {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.tableId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.eventType_present = ::std::option::Option::Some(RowChange_oneof_eventType_present::eventType(is.read_enum()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.isDdl_present = ::std::option::Option::Some(RowChange_oneof_isDdl_present::isDdl(is.read_bool()?));
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sql)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rowDatas)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ddlSchemaName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tableId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.tableId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sql.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.sql);
        }
        for value in &self.rowDatas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.ddlSchemaName.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.ddlSchemaName);
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &RowChange_oneof_eventType_present::eventType(v) => {
                    my_size += ::protobuf::rt::enum_size(2, v);
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.isDdl_present {
            match v {
                &RowChange_oneof_isDdl_present::isDdl(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tableId != 0 {
            os.write_int64(1, self.tableId)?;
        }
        if !self.sql.is_empty() {
            os.write_string(11, &self.sql)?;
        }
        for v in &self.rowDatas {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.props {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.ddlSchemaName.is_empty() {
            os.write_string(14, &self.ddlSchemaName)?;
        }
        if let ::std::option::Option::Some(ref v) = self.eventType_present {
            match v {
                &RowChange_oneof_eventType_present::eventType(v) => {
                    os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.isDdl_present {
            match v {
                &RowChange_oneof_isDdl_present::isDdl(v) => {
                    os.write_bool(10, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RowChange {
        RowChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "tableId",
                |m: &RowChange| { &m.tableId },
                |m: &mut RowChange| { &mut m.tableId },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, EventType>(
                "eventType",
                RowChange::has_eventType,
                RowChange::get_eventType,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "isDdl",
                RowChange::has_isDdl,
                RowChange::get_isDdl,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sql",
                |m: &RowChange| { &m.sql },
                |m: &mut RowChange| { &mut m.sql },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RowData>>(
                "rowDatas",
                |m: &RowChange| { &m.rowDatas },
                |m: &mut RowChange| { &mut m.rowDatas },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "props",
                |m: &RowChange| { &m.props },
                |m: &mut RowChange| { &mut m.props },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ddlSchemaName",
                |m: &RowChange| { &m.ddlSchemaName },
                |m: &mut RowChange| { &mut m.ddlSchemaName },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RowChange>(
                "RowChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RowChange {
        static instance: ::protobuf::rt::LazyV2<RowChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RowChange::new)
    }
}

impl ::protobuf::Clear for RowChange {
    fn clear(&mut self) {
        self.tableId = 0;
        self.eventType_present = ::std::option::Option::None;
        self.isDdl_present = ::std::option::Option::None;
        self.sql.clear();
        self.rowDatas.clear();
        self.props.clear();
        self.ddlSchemaName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RowChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RowChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionBegin {
    // message fields
    pub executeTime: i64,
    pub transactionId: ::std::string::String,
    pub props: ::protobuf::RepeatedField<Pair>,
    pub threadId: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionBegin {
    fn default() -> &'a TransactionBegin {
        <TransactionBegin as ::protobuf::Message>::default_instance()
    }
}

impl TransactionBegin {
    pub fn new() -> TransactionBegin {
        ::std::default::Default::default()
    }

    // int64 executeTime = 1;


    pub fn get_executeTime(&self) -> i64 {
        self.executeTime
    }
    pub fn clear_executeTime(&mut self) {
        self.executeTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_executeTime(&mut self, v: i64) {
        self.executeTime = v;
    }

    // string transactionId = 2;


    pub fn get_transactionId(&self) -> &str {
        &self.transactionId
    }
    pub fn clear_transactionId(&mut self) {
        self.transactionId.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactionId(&mut self, v: ::std::string::String) {
        self.transactionId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionId(&mut self) -> &mut ::std::string::String {
        &mut self.transactionId
    }

    // Take field
    pub fn take_transactionId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transactionId, ::std::string::String::new())
    }

    // repeated .Pair props = 3;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }

    // int64 threadId = 4;


    pub fn get_threadId(&self) -> i64 {
        self.threadId
    }
    pub fn clear_threadId(&mut self) {
        self.threadId = 0;
    }

    // Param is passed by value, moved
    pub fn set_threadId(&mut self, v: i64) {
        self.threadId = v;
    }
}

impl ::protobuf::Message for TransactionBegin {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.executeTime = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transactionId)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.threadId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.executeTime != 0 {
            my_size += ::protobuf::rt::value_size(1, self.executeTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.transactionId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.transactionId);
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.threadId != 0 {
            my_size += ::protobuf::rt::value_size(4, self.threadId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.executeTime != 0 {
            os.write_int64(1, self.executeTime)?;
        }
        if !self.transactionId.is_empty() {
            os.write_string(2, &self.transactionId)?;
        }
        for v in &self.props {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.threadId != 0 {
            os.write_int64(4, self.threadId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionBegin {
        TransactionBegin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "executeTime",
                |m: &TransactionBegin| { &m.executeTime },
                |m: &mut TransactionBegin| { &mut m.executeTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transactionId",
                |m: &TransactionBegin| { &m.transactionId },
                |m: &mut TransactionBegin| { &mut m.transactionId },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "props",
                |m: &TransactionBegin| { &m.props },
                |m: &mut TransactionBegin| { &mut m.props },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "threadId",
                |m: &TransactionBegin| { &m.threadId },
                |m: &mut TransactionBegin| { &mut m.threadId },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionBegin>(
                "TransactionBegin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionBegin {
        static instance: ::protobuf::rt::LazyV2<TransactionBegin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionBegin::new)
    }
}

impl ::protobuf::Clear for TransactionBegin {
    fn clear(&mut self) {
        self.executeTime = 0;
        self.transactionId.clear();
        self.props.clear();
        self.threadId = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionBegin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionBegin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionEnd {
    // message fields
    pub executeTime: i64,
    pub transactionId: ::std::string::String,
    pub props: ::protobuf::RepeatedField<Pair>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionEnd {
    fn default() -> &'a TransactionEnd {
        <TransactionEnd as ::protobuf::Message>::default_instance()
    }
}

impl TransactionEnd {
    pub fn new() -> TransactionEnd {
        ::std::default::Default::default()
    }

    // int64 executeTime = 1;


    pub fn get_executeTime(&self) -> i64 {
        self.executeTime
    }
    pub fn clear_executeTime(&mut self) {
        self.executeTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_executeTime(&mut self, v: i64) {
        self.executeTime = v;
    }

    // string transactionId = 2;


    pub fn get_transactionId(&self) -> &str {
        &self.transactionId
    }
    pub fn clear_transactionId(&mut self) {
        self.transactionId.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactionId(&mut self, v: ::std::string::String) {
        self.transactionId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactionId(&mut self) -> &mut ::std::string::String {
        &mut self.transactionId
    }

    // Take field
    pub fn take_transactionId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transactionId, ::std::string::String::new())
    }

    // repeated .Pair props = 3;


    pub fn get_props(&self) -> &[Pair] {
        &self.props
    }
    pub fn clear_props(&mut self) {
        self.props.clear();
    }

    // Param is passed by value, moved
    pub fn set_props(&mut self, v: ::protobuf::RepeatedField<Pair>) {
        self.props = v;
    }

    // Mutable pointer to the field.
    pub fn mut_props(&mut self) -> &mut ::protobuf::RepeatedField<Pair> {
        &mut self.props
    }

    // Take field
    pub fn take_props(&mut self) -> ::protobuf::RepeatedField<Pair> {
        ::std::mem::replace(&mut self.props, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionEnd {
    fn is_initialized(&self) -> bool {
        for v in &self.props {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.executeTime = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transactionId)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.props)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.executeTime != 0 {
            my_size += ::protobuf::rt::value_size(1, self.executeTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.transactionId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.transactionId);
        }
        for value in &self.props {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.executeTime != 0 {
            os.write_int64(1, self.executeTime)?;
        }
        if !self.transactionId.is_empty() {
            os.write_string(2, &self.transactionId)?;
        }
        for v in &self.props {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionEnd {
        TransactionEnd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "executeTime",
                |m: &TransactionEnd| { &m.executeTime },
                |m: &mut TransactionEnd| { &mut m.executeTime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transactionId",
                |m: &TransactionEnd| { &m.transactionId },
                |m: &mut TransactionEnd| { &mut m.transactionId },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Pair>>(
                "props",
                |m: &TransactionEnd| { &m.props },
                |m: &mut TransactionEnd| { &mut m.props },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionEnd>(
                "TransactionEnd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionEnd {
        static instance: ::protobuf::rt::LazyV2<TransactionEnd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionEnd::new)
    }
}

impl ::protobuf::Clear for TransactionEnd {
    fn clear(&mut self) {
        self.executeTime = 0;
        self.transactionId.clear();
        self.props.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionEnd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionEnd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Pair {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pair {
    fn default() -> &'a Pair {
        <Pair as ::protobuf::Message>::default_instance()
    }
}

impl Pair {
    pub fn new() -> Pair {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Pair {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pair {
        Pair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Pair| { &m.key },
                |m: &mut Pair| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &Pair| { &m.value },
                |m: &mut Pair| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Pair>(
                "Pair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Pair {
        static instance: ::protobuf::rt::LazyV2<Pair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Pair::new)
    }
}

impl ::protobuf::Clear for Pair {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EntryType {
    ENTRYTYPECOMPATIBLEPROTO2 = 0,
    TRANSACTIONBEGIN = 1,
    ROWDATA = 2,
    TRANSACTIONEND = 3,
    HEARTBEAT = 4,
    GTIDLOG = 5,
}

impl ::protobuf::ProtobufEnum for EntryType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntryType> {
        match value {
            0 => ::std::option::Option::Some(EntryType::ENTRYTYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(EntryType::TRANSACTIONBEGIN),
            2 => ::std::option::Option::Some(EntryType::ROWDATA),
            3 => ::std::option::Option::Some(EntryType::TRANSACTIONEND),
            4 => ::std::option::Option::Some(EntryType::HEARTBEAT),
            5 => ::std::option::Option::Some(EntryType::GTIDLOG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EntryType] = &[
            EntryType::ENTRYTYPECOMPATIBLEPROTO2,
            EntryType::TRANSACTIONBEGIN,
            EntryType::ROWDATA,
            EntryType::TRANSACTIONEND,
            EntryType::HEARTBEAT,
            EntryType::GTIDLOG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EntryType>("EntryType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EntryType {
}

impl ::std::default::Default for EntryType {
    fn default() -> Self {
        EntryType::ENTRYTYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for EntryType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    EVENTTYPECOMPATIBLEPROTO2 = 0,
    INSERT = 1,
    UPDATE = 2,
    DELETE = 3,
    CREATE = 4,
    ALTER = 5,
    ERASE = 6,
    QUERY = 7,
    TRUNCATE = 8,
    RENAME = 9,
    CINDEX = 10,
    DINDEX = 11,
    GTID = 12,
    XACOMMIT = 13,
    XAROLLBACK = 14,
    MHEARTBEAT = 15,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::EVENTTYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(EventType::INSERT),
            2 => ::std::option::Option::Some(EventType::UPDATE),
            3 => ::std::option::Option::Some(EventType::DELETE),
            4 => ::std::option::Option::Some(EventType::CREATE),
            5 => ::std::option::Option::Some(EventType::ALTER),
            6 => ::std::option::Option::Some(EventType::ERASE),
            7 => ::std::option::Option::Some(EventType::QUERY),
            8 => ::std::option::Option::Some(EventType::TRUNCATE),
            9 => ::std::option::Option::Some(EventType::RENAME),
            10 => ::std::option::Option::Some(EventType::CINDEX),
            11 => ::std::option::Option::Some(EventType::DINDEX),
            12 => ::std::option::Option::Some(EventType::GTID),
            13 => ::std::option::Option::Some(EventType::XACOMMIT),
            14 => ::std::option::Option::Some(EventType::XAROLLBACK),
            15 => ::std::option::Option::Some(EventType::MHEARTBEAT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::EVENTTYPECOMPATIBLEPROTO2,
            EventType::INSERT,
            EventType::UPDATE,
            EventType::DELETE,
            EventType::CREATE,
            EventType::ALTER,
            EventType::ERASE,
            EventType::QUERY,
            EventType::TRUNCATE,
            EventType::RENAME,
            EventType::CINDEX,
            EventType::DINDEX,
            EventType::GTID,
            EventType::XACOMMIT,
            EventType::XAROLLBACK,
            EventType::MHEARTBEAT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventType>("EventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::EVENTTYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Type {
    TYPECOMPATIBLEPROTO2 = 0,
    ORACLE = 1,
    MYSQL = 2,
    PGSQL = 3,
}

impl ::protobuf::ProtobufEnum for Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Type> {
        match value {
            0 => ::std::option::Option::Some(Type::TYPECOMPATIBLEPROTO2),
            1 => ::std::option::Option::Some(Type::ORACLE),
            2 => ::std::option::Option::Some(Type::MYSQL),
            3 => ::std::option::Option::Some(Type::PGSQL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Type] = &[
            Type::TYPECOMPATIBLEPROTO2,
            Type::ORACLE,
            Type::MYSQL,
            Type::PGSQL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Type>("Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Type {
}

impl ::std::default::Default for Type {
    fn default() -> Self {
        Type::TYPECOMPATIBLEPROTO2
    }
}

impl ::protobuf::reflect::ProtobufValue for Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16mini_canal_entry.proto\"\x91\x01\n\x05Entry\x12!\n\x06header\x18\
    \x01\x20\x01(\x0b2\x07.HeaderR\x06headerB\0\x12,\n\tentryType\x18\x02\
    \x20\x01(\x0e2\n.EntryTypeH\0R\tentryTypeB\0\x12\x20\n\nstoreValue\x18\
    \x03\x20\x01(\x0cR\nstoreValueB\0B\x13\n\x11entryType_present:\0\"\x8e\
    \x04\n\x06Header\x12\x1c\n\x07version\x18\x01\x20\x01(\x05H\0R\x07versio\
    nB\0\x12\"\n\x0blogfileName\x18\x02\x20\x01(\tR\x0blogfileNameB\0\x12&\n\
    \rlogfileOffset\x18\x03\x20\x01(\x03R\rlogfileOffsetB\0\x12\x1c\n\x08ser\
    verId\x18\x04\x20\x01(\x03R\x08serverIdB\0\x12$\n\x0cserverenCode\x18\
    \x05\x20\x01(\tR\x0cserverenCodeB\0\x12\"\n\x0bexecuteTime\x18\x06\x20\
    \x01(\x03R\x0bexecuteTimeB\0\x12)\n\nsourceType\x18\x07\x20\x01(\x0e2\
    \x05.TypeH\x01R\nsourceTypeB\0\x12\x20\n\nschemaName\x18\x08\x20\x01(\tR\
    \nschemaNameB\0\x12\x1e\n\ttableName\x18\t\x20\x01(\tR\ttableNameB\0\x12\
    \"\n\x0beventLength\x18\n\x20\x01(\x03R\x0beventLengthB\0\x12,\n\teventT\
    ype\x18\x0b\x20\x01(\x0e2\n.EventTypeH\x02R\teventTypeB\0\x12\x1d\n\x05p\
    rops\x18\x0c\x20\x03(\x0b2\x05.PairR\x05propsB\0\x12\x14\n\x04gtid\x18\r\
    \x20\x01(\tR\x04gtidB\0B\x11\n\x0fversion_presentB\x14\n\x12sourceType_p\
    resentB\x13\n\x11eventType_present:\0\"\xa7\x02\n\x06Column\x12\x16\n\
    \x05index\x18\x01\x20\x01(\x05R\x05indexB\0\x12\x1a\n\x07sqlType\x18\x02\
    \x20\x01(\x05R\x07sqlTypeB\0\x12\x14\n\x04name\x18\x03\x20\x01(\tR\x04na\
    meB\0\x12\x16\n\x05isKey\x18\x04\x20\x01(\x08R\x05isKeyB\0\x12\x1a\n\x07\
    updated\x18\x05\x20\x01(\x08R\x07updatedB\0\x12\x1a\n\x06isNull\x18\x06\
    \x20\x01(\x08H\0R\x06isNullB\0\x12\x1d\n\x05props\x18\x07\x20\x03(\x0b2\
    \x05.PairR\x05propsB\0\x12\x16\n\x05value\x18\x08\x20\x01(\tR\x05valueB\
    \0\x12\x18\n\x06length\x18\t\x20\x01(\x05R\x06lengthB\0\x12\x1e\n\tmysql\
    Type\x18\n\x20\x01(\tR\tmysqlTypeB\0B\x10\n\x0eisNull_present:\0\"\x8a\
    \x01\n\x07RowData\x12/\n\rbeforeColumns\x18\x01\x20\x03(\x0b2\x07.Column\
    R\rbeforeColumnsB\0\x12-\n\x0cafterColumns\x18\x02\x20\x03(\x0b2\x07.Col\
    umnR\x0cafterColumnsB\0\x12\x1d\n\x05props\x18\x03\x20\x03(\x0b2\x05.Pai\
    rR\x05propsB\0:\0\"\x9a\x02\n\tRowChange\x12\x1a\n\x07tableId\x18\x01\
    \x20\x01(\x03R\x07tableIdB\0\x12,\n\teventType\x18\x02\x20\x01(\x0e2\n.E\
    ventTypeH\0R\teventTypeB\0\x12\x18\n\x05isDdl\x18\n\x20\x01(\x08H\x01R\
    \x05isDdlB\0\x12\x12\n\x03sql\x18\x0b\x20\x01(\tR\x03sqlB\0\x12&\n\x08ro\
    wDatas\x18\x0c\x20\x03(\x0b2\x08.RowDataR\x08rowDatasB\0\x12\x1d\n\x05pr\
    ops\x18\r\x20\x03(\x0b2\x05.PairR\x05propsB\0\x12&\n\rddlSchemaName\x18\
    \x0e\x20\x01(\tR\rddlSchemaNameB\0B\x13\n\x11eventType_presentB\x0f\n\ri\
    sDdl_present:\0\"\x9d\x01\n\x10TransactionBegin\x12\"\n\x0bexecuteTime\
    \x18\x01\x20\x01(\x03R\x0bexecuteTimeB\0\x12&\n\rtransactionId\x18\x02\
    \x20\x01(\tR\rtransactionIdB\0\x12\x1d\n\x05props\x18\x03\x20\x03(\x0b2\
    \x05.PairR\x05propsB\0\x12\x1c\n\x08threadId\x18\x04\x20\x01(\x03R\x08th\
    readIdB\0:\0\"}\n\x0eTransactionEnd\x12\"\n\x0bexecuteTime\x18\x01\x20\
    \x01(\x03R\x0bexecuteTimeB\0\x12&\n\rtransactionId\x18\x02\x20\x01(\tR\r\
    transactionIdB\0\x12\x1d\n\x05props\x18\x03\x20\x03(\x0b2\x05.PairR\x05p\
    ropsB\0:\0\"4\n\x04Pair\x12\x12\n\x03key\x18\x01\x20\x01(\tR\x03keyB\0\
    \x12\x16\n\x05value\x18\x02\x20\x01(\tR\x05valueB\0:\0*\x7f\n\tEntryType\
    \x12\x1d\n\x19ENTRYTYPECOMPATIBLEPROTO2\x10\0\x12\x14\n\x10TRANSACTIONBE\
    GIN\x10\x01\x12\x0b\n\x07ROWDATA\x10\x02\x12\x12\n\x0eTRANSACTIONEND\x10\
    \x03\x12\r\n\tHEARTBEAT\x10\x04\x12\x0b\n\x07GTIDLOG\x10\x05\x1a\0*\xe7\
    \x01\n\tEventType\x12\x1d\n\x19EVENTTYPECOMPATIBLEPROTO2\x10\0\x12\n\n\
    \x06INSERT\x10\x01\x12\n\n\x06UPDATE\x10\x02\x12\n\n\x06DELETE\x10\x03\
    \x12\n\n\x06CREATE\x10\x04\x12\t\n\x05ALTER\x10\x05\x12\t\n\x05ERASE\x10\
    \x06\x12\t\n\x05QUERY\x10\x07\x12\x0c\n\x08TRUNCATE\x10\x08\x12\n\n\x06R\
    ENAME\x10\t\x12\n\n\x06CINDEX\x10\n\x12\n\n\x06DINDEX\x10\x0b\x12\x08\n\
    \x04GTID\x10\x0c\x12\x0c\n\x08XACOMMIT\x10\r\x12\x0e\n\nXAROLLBACK\x10\
    \x0e\x12\x0e\n\nMHEARTBEAT\x10\x0f\x1a\0*D\n\x04Type\x12\x18\n\x14TYPECO\
    MPATIBLEPROTO2\x10\0\x12\n\n\x06ORACLE\x10\x01\x12\t\n\x05MYSQL\x10\x02\
    \x12\t\n\x05PGSQL\x10\x03\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
